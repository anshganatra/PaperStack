openapi: 3.0.3
info:
  title: PaperStack
  version: 1.0.0

tags:
  - name: Users
    description: Operations about users
  - name: Projects
    description: Manage projects and their properties
  - name: Documents
    description: Manage documents within a project
  - name: Query
    description: Endpoint for running queries

paths:
  /users:
    get:
      tags: [Users]
      summary: List users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags: [Users]
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - name
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
      responses:
        '201':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  '/users/{userId}':
    get:
      tags: [Users]
      summary: Get user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not found
    patch:
      tags: [Users]
      summary: Update user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not found
    delete:
      tags: [Users]
      summary: Delete user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Deleted
        '404':
          description: Not found

  /projects:
    get:
      tags: [Projects]
      summary: List projects
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    post:
      tags: [Projects]
      summary: Create project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Created project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  '/projects/{projectId}':
    get:
      tags: [Projects]
      summary: Get project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Not found
    patch:
      tags: [Projects]
      summary: Update project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Updated project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Not found
    delete:
      tags: [Projects]
      summary: Delete project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Deleted
        '404':
          description: Not found

  '/projects/{projectId}/documents':
    get:
      tags: [Documents]
      summary: List documents for a project
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Array of documents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
    post:
      tags: [Documents]
      summary: Create a document
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - text
              properties:
                title:
                  type: string
                text:
                  type: string
      responses:
        '201':
          description: Created document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'

  '/projects/{projectId}/documents/{documentId}':
    get:
      tags: [Documents]
      summary: Get document
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          description: Not found
    patch:
      tags: [Documents]
      summary: Update document
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                title:
                  type: string
                text:
                  type: string
      responses:
        '200':
          description: Updated document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          description: Not found
    delete:
      tags: [Documents]
      summary: Delete document
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Deleted
        '404':
          description: Not found

  '/projects/{projectId}/documents/{documentId}/index':
    post:
      tags: [Documents]
      summary: Run chunking/embedding for this document
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: Index accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          description: Not found

  /query:
    post:
      tags: [Query]
      summary: Run query over a project (optionally scoped to one document)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - projectId
                - text
              properties:
                projectId:
                  type: string
                  format: uuid
                  description: Target project to search
                text:
                  type: string
                  description: Query
                documentId:
                  type: string
                  format: uuid
                  nullable: true
                  description: Optional single-document scope
                topK:
                  type: integer
                  default: 5
                  minimum: 1
                  maximum: 50
      responses:
        '200':
          description: Query result (top-k passages)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
components:
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - name
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        email:
          type: string
          format: email
        name:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    Project:
      type: object
      required:
        - id
        - name
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    Document:
      type: object
      required:
        - id
        - projectId
        - title
        - text
        - status
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        projectId:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
        text:
          type: string
        status:
          type: string
          enum:
            - NEW
            - INDEXING
            - INDEXED
            - FAILED
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
    QueryResult:
      type: object
      required:
        - id
        - projectId
        - text
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        projectId:
          type: string
          format: uuid
          readOnly: true
        text:
          type: string
        docId:
          type: string
          format: uuid
          nullable: true
          description: Optional single-document scope
        topK:
          type: integer
          default: 5
        passages:
          type: array
          description: Top-k result passages
          items:
            type: object
            required:
              - docId
              - snippet
              - score
            properties:
              docId:
                type: string
                format: uuid
              snippet:
                type: string
              score:
                type: number
                format: float
              citation:
                type: string
                description: 'e.g., "Doc Title chunk #12, chars 1020-1310"'
        createdAt:
          type: string
          format: date-time
          readOnly: true
